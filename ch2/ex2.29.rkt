#lang planet neil/sicp
(define (make-mobile left right)
  (list left right))
(define (left-branch a-mobile)
  (car a-mobile))
(define (right-branch a-mobile)
  (cadr a-mobile))

(define (make-branch length structure)
  (list length structure))
(define (branch-length a-branch)
  (car a-branch))
(define (branch-structure a-branch)
  (cadr a-branch))


(define (total-weight mobile)
  (+ (branch-weight (left-branch mobile))
     (branch-weight (right-branch mobile))))
(define (branch-weight branch)
  (if (hangs-another-mobile? branch)
      (total-weight (branch-structure branch))
      (branch-structure branch)))
(define (hangs-another-mobile? branch)
  (pair? (branch-structure branch)))
  
(define x (make-mobile (make-branch 1 2)
                       (make-branch 3 4)))
(define y (make-mobile (make-branch 5 x)
                       (make-branch 6 7)))
(total-weight x)
(total-weight y)

(define (balanced? a-mobile)
  (and
   (branch-balanced? (left-branch a-mobile))
   (branch-balanced? (right-branch a-mobile))
   (= (branch-torque (left-branch a-mobile))
      (branch-torque (right-branch a-mobile)))))
(define (branch-torque a-branch)
  (* (branch-length a-branch)
     (branch-weight a-branch)))
(define (branch-balanced? a-branch)
  (if (hangs-another-mobile? a-branch)
      (balanced? (branch-structure a-branch))
      true))

(define balanced-mobile (make-mobile (make-branch 10 100)
                                     (make-branch 100 10)))
(define un (make-mobile (make-branch 20 balanced-mobile)
                        (make-branch 220 10)))
                
(balanced? balanced-mobile)
(balanced? y)
(balanced? un)