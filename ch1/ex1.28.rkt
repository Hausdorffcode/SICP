#lang planet neil/sicp
(define (expmod base exp m)
  (cond 
        ((= exp 0) 1)
        ((nontrivial? base m) 0)
        ((even? exp) (remainder (square (expmod base (/ exp 2) m)) m))
        (else (remainder (* base (expmod base (- exp 1) m)) m))))
(define (Miller-Rabin-test n)
  (define (try-it a)
    (= (expmod a (- n 1) n) 1))
  (try-it (+ 1 (random (- n 1)))))
(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((Miller-Rabin-test n) (fast-prime? n (- times 1)))
        (else false)))
(define (square x)
  (* x x))
(define (nontrivial? a n)
  (and (not (= a 1))
       (not (= a (- n 1)))
       (= (remainder (square a) n) 1)))
(fast-prime? 7 5)
(fast-prime? 17 8)
(fast-prime? 55 20)
(fast-prime? 561 300)
(fast-prime? 1105 500)
(fast-prime? 1729 880)
(fast-prime? 2465 1230)
(fast-prime? 2821 1410)
(fast-prime? 6601 3300)
